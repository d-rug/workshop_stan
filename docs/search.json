[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Stan",
    "section": "",
    "text": "Overview\nYOUR DESCRIPTION, LEARNING GOALS, PREREQUISITES, ETC"
  },
  {
    "objectID": "01_intro.html#stan",
    "href": "01_intro.html#stan",
    "title": "Introduction",
    "section": "Stan",
    "text": "Stan\nStan is a platform for Bayesian modeling of data. It is a platform because it combines a language with a compiler and sampler, and an API that enables extensions in other statistical programming software. Today, obviously, we will talk about Stan in R. Working in R also provides an ecosystem of related packages that make preparing and interpreting your model easier."
  },
  {
    "objectID": "01_intro.html#installing-stan",
    "href": "01_intro.html#installing-stan",
    "title": "Introduction",
    "section": "Installing Stan",
    "text": "Installing Stan\nThere is more than one way to do it! I recommend installing the cmdstanr package.\n\nRequirements\nYou need a C++ compiler toolchain in order to use Stan through cmdstanr (other packages may install their own compiler[?]). If you don’t have a C++ compiler toolchain, here’s how to install one:\n\nWindows - Install Rtools: https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html\nMac - Uses XCode command line tools. Check the tools for R: https://mac.r-project.org/tools/\nLinux - your package manager should be able to install gcc.\n\n\n\nSteps\nYou’ll install the cmdstanr package, which depends on haing cmdstan installed. But don’t worry - the R package provides a function that downloads and installs cmdstan. First install the R package:\n\n# we recommend running this is a fresh R session or restarting your current session\ninstall.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n\nThen use it to install cmdstan:\n\ncmdstanr::install_cmdstan()"
  },
  {
    "objectID": "02_using_stan.html#using-stan",
    "href": "02_using_stan.html#using-stan",
    "title": "Using Stan",
    "section": "Using Stan",
    "text": "Using Stan\nToday we are learning to use Stan via the R package cmdstanr. This is not the only option - in particular, the packages brms and rethinking implement two other paradigms for using Stan from R.\n\nbrms\nIf you’ve already learned to use mixed-effects models in R, then the easiest way to get into using Stan through R is via the package brms. brms basically allows you to write regression models in the same for as with the lme4 package, but the calculation uses Stan behind the scenes. We have an upcoming mini-workshop on brms (November 1).\n\n\nrethinking\nFormer UC Davis professor Richard McElreath created the rethinking package as an accompaniment to his (excellent) textbook about applied Bayesian modeling, “Statistical Rethinking”. Like cmdstanr, rethinking can implement models that aren’t just regression. In fact the model language of rethinking probably gives you access to the entire catalog of Stan’s features, and in a (for some) more intuitive language. But we aren’t going to talk about rethinking because cmdstanr is more fundamental, so everything you learn here wil apply to rethinking as well, but not the reverse.\n\n\ncmdstanr\nAhh, the main event. You should understand that cmdstanr is a lightweight wrapper over Stan. So most of what you need to learn right now is not about R, but about Stan itself. cmdstanr provides a way to do the three fundamental steps:\n\nCompile a Stan model\nAttach data to it, and\nSample from the model"
  },
  {
    "objectID": "03_example.html#an-example",
    "href": "03_example.html#an-example",
    "title": "Using Stan",
    "section": "An example",
    "text": "An example\nOK, let’srun an example!\nRemember that we just said there are fundamentally three steps to executing a model:\n\nCompile a Stan model\nAttach data to it, and\nSample from the model\n\nWell, there may as well be a double step zero that comes before we can consider executing a: collect data and conceive an appropriate model. We’ll use a simple example - see the Stan documentation for a long list of examples and case studies.\n\nData\nEvery installation of R comes with a data set called faithful, which reports on the interval and duration of eruptions of the Old Faithful geyser in Yellowstone National Park, Wyoming. Let’s load the data and look at it.\n\ndata(faithful)\nplot(faithful)\n\n\n\n\nIt’s apparent from the plot that there is a bimodal distribution, with some eruptions lasting longer and with a longer duration between them, and another cluster of shorter eruptions with a shorter duration between them. We will model the eruptions as a mixture of two bivariate normal distributions. We’ll define the two components of the mixture to have the same covariance but different centers.\n\n\nModel\nA Stan model has sections for:\n\ndata\nDecribes the data that will feed the model. Every data variable must match the name and type of an entry in a list that is passed to the model’s sample() method.\n\n\ntransformed data\nDefine new variables that are used like data, but are calculated from the data rather than passed in. Bcause these calculations only depend on the data (which are fixed) they only happen once.\n\n\nparameters\nDefines parameters that are used in the model section.\n\n\ntransformed parameters\nDefines variables that are functions of the parameters. You don’t specify a prior distribution for a transformed parameter because it is implied by the parameter(s) that are used in the calculation.\n\n\nmodel\nIn this code block, define the prior distributions of all parameters and the relationship between parameters and data.\n\n\ngenerated quantities\nSummary outputs that are calculated once per sample (most other quantities are calculated once per HMC step, of which there are several per sample.)\n\n\nExample model definition\nThis Stan code defines the bivariate mixture model. Copy, paste, and save it to a file called bivariate_mixture.stan.\n\ndata {\n  int&lt;lower=1&gt; N;\n  vector[N] duration;\n  vector[N] interval;\n}\ntransformed  data{\n  array[N] vector[2] y;\n  for (i in 1:N) {\n    y[i] = [duration[i], interval[i]]';\n  }\n}\nparameters {\n  // centers of the clusters:\n  ordered[2] loc_x;\n  vector[2] loc_y;\n  \n  // standard deviation and correlation within the clusters\n  vector&lt;lower=0&gt;[2] std;\n  real&lt;lower=0&gt; cor;\n  \n  // mixing proportions:\n  vector&lt;lower=0, upper=1&gt;[N] p;\n}\ntransformed parameters{\n  cov_matrix[2] Sigma;\n\n  // populate the covariance matrix\n  Sigma[1,1] = std[1]^2;\n  Sigma[1,2] = std[1] * std[2] * cor;\n  Sigma[2,1] = Sigma[1,2];\n  Sigma[2,2] = std[2]^2;\n}\nmodel {\n  // define priors:\n  cor ~ exponential(1);\n  std ~ exponential(1);\n  loc_x ~ student_t(6, 0, 10);\n  loc_y ~ student_t(6, 0, 10);\n  p ~ beta(1, 1);\n\n  // define the model:\n  for (i in 1:N) {\n    target += log_mix(p[i],\n      multi_normal_lpdf(y[i] | [loc_x[1], loc_y[1]]', Sigma),\n      multi_normal_lpdf(y[i] | [loc_x[2], loc_y[2]]', Sigma));\n  }\n}\ngenerated quantities {\n  // take posterior predictive samples of group assignment\n  // and the interval/duration pair.\n  array[N] int grp_id;\n  array[N] vector[2] y_pred;\n  \n  // loop over the rows of data\n  for (i in 1:N) {\n    // estimate which mode this eruption belongs to\n    grp_id[i] = bernoulli_rng(p[i]);\n    \n    // depending on which mode, sample from one of the\n    // two multivariate normal distributions of the mixture.\n    if (grp_id[i] == 1) {\n      y_pred[i] = multi_normal_rng([loc_x[1], loc_y[1]]', Sigma);\n    } else {\n      y_pred[i] = multi_normal_rng([loc_x[2], loc_y[2]]', Sigma);\n    }\n  }\n}\n\n\n\n\nCompile the model\nHere’ we’ll compile the Stan model.\n\nmix_model = cmdstan_model(stan_file=\"stan/bivariate_mixture.stan\")\n\nWarning in readLines(stan_file): incomplete final line found on\n'stan/bivariate_mixture.stan'\n\n\n\n\nDefine data\nThe model expects three pieces of data: intervalanddurationare vectors of the time between and during eruptions of Old Faithful, respectively. AndN` is the length of each of those two vectors.\n\n# create a list of data for the model\nstan_data = list(\n  N = nrow(faithful),\n  duration = faithful$eruptions,\n  interval = faithful$waiting\n  )\n\n\n\nSample the posterior\nNow the magic happens: We set Stan loose with data and a model, and will sample the posterior distributions of the model’s parameters. The arguments to thesample function are used to run the Markov chains in parallel, and to take 6000 samples from each chain with the first 5000 of each being warmup samples as the model converges to the posterior. When you run this code, you’ll see a looooooong stream of text that describes the ongoing sampling and any problems.\n\n# sample the posterior for the model, given the data\nmix_fit = mix_model$sample(\n  data=stan_data,\n  chains=4,\n  parallel_chains=4,\n  iter_warmup=5000,\n  iter_sampling = 1000)\n)\n\n\n# load the saved posterior fit\nload(file=\"data/mix_fit.rda\")\n\n\n\nResults\nYou have a lot of options for how to do summaries, visualization, and diagnostics. I’ll just show some very basic stuff but you should check out Statistical Rethinking or Bayesian Data Analysis to learn more about creating and interpreting Bayesian models.\nThe first step is probably to summarize the posterior samples. Look for Rhat near one, effective sample size near 4000 (1000 samples x 4 chains)\nYou could also directly inspect the posterior samples:\n\n# the posterior package provides the function `as_draws_df()`\nlibrary(posterior)\n\nThis is posterior version 1.4.1\n\n\n\nAttaching package: 'posterior'\n\n\nThe following objects are masked from 'package:stats':\n\n    mad, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    %in%, match\n\n# extract posterior samples\nmix_df = as_draws_df(mix_fit)\n\nhead(mix_df)\n\n# A draws_df: 6 iterations, 1 chains, and 1100 variables\n   lp__ loc_x[1] loc_x[2] loc_y[1] loc_y[2] std[1] std[2]  cor\n1 -1681      2.1      4.2       55       80   0.37    6.0 0.23\n2 -1679      2.0      4.3       54       80   0.37    5.8 0.38\n3 -1666      2.0      4.3       55       80   0.38    6.3 0.34\n4 -1659      2.1      4.2       55       80   0.35    5.6 0.34\n5 -1678      2.1      4.3       55       80   0.37    6.1 0.32\n6 -1677      2.0      4.3       54       80   0.35    5.6 0.32\n# ... with 1092 more variables\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n\n\n\nPlot\nHere I’ve created a combined plot of the raw data, posterior samples of the centers of the two mixture components, and a contour of the 95% credible interval of the posterior predictive distribution for each component. Looks OK to me!\nNote that I am extracting posterior samples from the fitted model object via a couple of custom functions from a package called workshp.stan - you can install it via remotes::install_github(\"d-rug/workshop_stan\")\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(workshop.stan)\n\n# call functions that get the posterior and\n# posterior predictive samples for plotting\nposterior_mix = old_faithful_posterior_samples(mix_df)\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\nJoining with `by = join_by(`Sigma[1,1]`, `Sigma[2,1]`, `Sigma[1,2]`,\n`Sigma[2,2]`, `std[1]`, `std[2]`, .chain, .iteration, .draw, grp_id)`\n\npost_pred_samples = old_faithful_posterior_predictive_samples(mix_df)\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\nJoining with `by = join_by(.chain, .iteration, .draw, indx)`\n\n\nJoining with `by = join_by(.chain, .iteration, .draw, indx)`\nJoining with `by = join_by(.chain, .iteration, .draw, indx)`\n\n# plot the data, with posterior samples of the cluster centers\n# and contours for the posterior predictive 95% intervals\nggplot(as.data.frame(faithful)) +\n  aes(x=eruptions, y=waiting) +\n  geom_point() +\n  geom_point(data=posterior_mix,\n             mapping=aes(x=x, y=y, color=grp_id==1),\n             alpha=0.05) +\n  stat_ellipse(data=post_pred_samples,\n               mapping=aes(x=xloc, y=yloc, color=grp_id==1),\n               linetype=2,\n               type='norm')"
  }
]